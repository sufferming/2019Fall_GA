# -*- coding: utf-8 -*-
"""vision.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VC-3w32cn7_WgBaMcSiypdQ8J1dkjZRI
"""
import argparse
import pandas as pd
import numpy as np
import ipdb
import logging
import sys
import strategy
import benchmark

logging.basicConfig(level=logging.INFO)
def parse_args():
	parser = argparse.ArgumentParser()
	parser.add_argument('-f1', type=str, help='Target file1 directory')
	parser.add_argument('-f2', type=str, help='Target file2 directory')
	parser.add_argument('-f3', type=str, help='Target model directory')
	parser.add_argument('-ww1', type=float, help='Target model directory')
	parser.add_argument('-ww2', type=float, help='Target model directory')
	parser.add_argument('-ww3', type=float, help='Target model directory')
	args = parser.parse_args()
	return vars(args)
class first_fund:
	def __init__(self,f1,f2,f3,ww1,ww2,ww3):
		#breakpoint()
		self.f1=f1
		self.f2=f2
		self.f3=f3
		self.ww1=ww1
		self.ww2=ww2
		self.ww3=ww3
		try:
			#print("f1",f1)
			#print("f2",f2)
			#print("f3",f3)
			#print("ww1",ww1)
			#print("ww2",ww2)
			#print("ww3",ww3)
			a = 1
            
		except FileNotFoundError:
			print('[!] No directory({},{},{}) must check again'.format(f1,f2,f3))
	def __call__(self, f1, f2, f3, ww1, ww2, ww3):
		#breakpoint()
		#load csv
		stock,bond,USD,stock_i,bond_i,USD_i,date=strategy.strategy(f1,f2,f3)
		#weighting
		sharp_ratio,sortino_ratio,excess,var,EoVaR,prof=benchmark.benchmark(ww1=ww1,ww2=ww2,ww3=ww3,stock=stock,bond=bond,USD=USD,stock_i=stock_i,bond_i=bond_i,USD_i=USD_i,date=date)
		out_dict={"fund_name":"first_fund","sharp":sharp_ratio,"sortino":sortino_ratio,"excess":excess,"VAR":var,"E on VaR":EoVaR,"history":[{"date":date,"unrealized gains":list(prof)}]}
		#print(out_dict)
		idx = [out_dict['sharp'], out_dict['sortino'], out_dict['excess'], out_dict['VAR'], out_dict['E on VaR'], out_dict['history'][0]['unrealized gains'][len(out_dict['history'][0]['unrealized gains'])-1]]
		# print(idx)
		return idx

		'''
		out_df = pd.DataFrame(out_dict)
		out_df.index=out_df["fund_name"]
		out_df.drop("fund_name", axis = 1)
		out_json=out_df.to_json()
		print(out_json)
		return out_json
		'''
		
if __name__ == "__main__":
	with ipdb.launch_ipdb_on_exception():
		sys.breakpointhook = ipdb.set_trace
		kwargs = parse_args()
		first_fund(**kwargs).__call__(**kwargs)
